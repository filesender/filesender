<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"  xmlns:comp="org.ricoshae.*" creationComplete="main_init()" layout="absolute" width="100%" height="100%" currentState="blank" backgroundColor="#FFFFFF">
	<mx:states>
		<mx:State name="vouchers_fed">      
			<mx:AddChild position="lastChild"> 
				<comp:vouchers id="vouchers" left="6" right="6" top="87" bottom="6">
				</comp:vouchers>          
			</mx:AddChild>                  
			<mx:AddChild relativeTo="{hbox0}" position="lastChild">
				<mx:Label text="| About" click="aboutLink()" buttonMode="true" useHandCursor="true" mouseChildren="false" toolTip="Information about this application" />
			</mx:AddChild> 
			<mx:RemoveChild target="{label2}"/>  
		</mx:State>                       
		<mx:State name="filedownload">               
			<mx:AddChild position="lastChild">
				<comp:download_std id="download_std" left="6" right="6" top="87" height="300"> 
				</comp:download_std>
			</mx:AddChild>              
		</mx:State> 
		<mx:State name="Message">
			<mx:AddChild relativeTo="{vbox1}" position="lastChild">   
				<mx:HBox width="100%" height="20" borderStyle="none" id="hbox1">
				</mx:HBox> 
			</mx:AddChild>         
			<mx:SetProperty target="{vbox1}" name="height" value="100%"/>
			<mx:AddChild relativeTo="{hbox1}" position="before">
				<mx:Label text="{splash.site_name}" id="siteDomain" width="100%" fontSize="27" textAlign="center" color="#424343" fontWeight="bold" visible="{authStatus}"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{hbox1}" position="before"> 
				<mx:HBox width="100%" height="200" horizontalAlign="center" verticalAlign="top" fontSize="14">
					<mx:TextArea height="200" width="400" htmlText="{splash.site_splashtext}" borderStyle="none" textAlign="center" wordWrap="true" id="siteSplash" editable="false"  visible="{authStatus}" alpha="1.0" />
				</mx:HBox>
			</mx:AddChild> 
			<mx:AddChild relativeTo="{hbox1}" position="before">
				<mx:HBox width="100%" height="60" id="hbox2" horizontalAlign="center" verticalAlign="middle">
					<mx:Button label="{lang.Logon}" click="logon()" id="btnLogon" height="54" width="274" fontSize="20" visible="{!authStatus}"/>
				</mx:HBox>
			</mx:AddChild>  
			<mx:AddChild relativeTo="{siteDomain}" position="before">
				<mx:TextArea id="MessageLabel" width="100%" height="85" borderStyle="none" textAlign="center" fontSize="14" editable="false" alpha="1.0"/>
			</mx:AddChild>
			<mx:RemoveChild target="{spacer2}"/>
			<mx:AddChild relativeTo="{MessageLabel}" position="before">
				<mx:Spacer height="20"/>
			</mx:AddChild>			
		</mx:State>             
		<mx:State name="Upload">        
			<mx:AddChild position="lastChild">
				<comp:upload_std id="upload_std" left="2" right="2" top="87" height="420">
				</comp:upload_std>
			</mx:AddChild> 
		</mx:State>
		<mx:State name="gearsUpload">
			<mx:AddChild position="lastChild">
				<comp:upload_gears id="upload_gears" left="6" right="6" top="87" height="420">
				</comp:upload_gears> 
			</mx:AddChild>
		</mx:State>
		<mx:State name="admin">
			<mx:AddChild position="lastChild">
				<comp:admin id="admin" left="6" right="6" top="87" bottom="6">
				</comp:admin>	
			</mx:AddChild>
		</mx:State>
		<mx:State name="my_files">
			<mx:AddChild position="lastChild">
				<comp:myfiles id="myfiles" left="6" right="6" top="87" bottom="6">
				</comp:myfiles>	
			</mx:AddChild>
		</mx:State>
		<mx:State name="blank">
			<mx:SetStyle name="backgroundColor" value="#FFFFFF"/>
			<mx:SetStyle target="{vbox1}" name="backgroundColor" value="#FFFFFF"/>
		</mx:State>
	</mx:states> 
	<mx:Script>
		<![CDATA[
			
			/*
			* FileSender www.filesender.org
			* 
			* Copyright (c) 2009-2011, AARNet, HEAnet, SURFnet, UNINETT
			* All rights reserved.
			* 
			* Redistribution and use in source and binary forms, with or without
			* modification, are permitted provided that the following conditions are met:
			* 
			* *	Redistributions of source code must retain the above copyright
			* 	notice, this list of conditions and the following disclaimer.
			* *	Redistributions in binary form must reproduce the above copyright
			* 	notice, this list of conditions and the following disclaimer in the
			* 	documentation and/or other materials provided with the distribution.
			* *	Neither the name of AARNet, HEAnet, SURFnet and UNINETT nor the
			* 	names of its contributors may be used to endorse or promote products
			* 	derived from this software without specific prior written permission.
			* 
			* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
			* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
			* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
			* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
			* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
			* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
			* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
			* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
			* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*/
			
			/* -----------------------------------------
			* flex default package for the filesender application
			* -----------------------------------------
			* the way flex communicates with PHP is to use HTTPservices
			* a HTTP service calls a PHP file and returns a result in a similar fashion to calling a function
			* typically the results are returned as a string or as JSON data
			* data sent to PHP using the HTTP services can be a string or JSON
			* each HTTP service call has a result function to return the service result and an error function to return PHP errors.
			*/
			
			import com.adobe.serialization.json.JSON;
			
			import flash.system.Capabilities;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.StateChangeEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.messaging.ChannelSet;
			import mx.messaging.channels.AMFChannel;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ArrayUtil;
			import mx.utils.ObjectProxy;
			import mx.utils.UIDUtil;
			
			import org.ricoshae.core.*;
			
			public var fileRef:FileReference = new FileReference();
			public var request:URLRequest;
			
			[Bindable] public var statsData:String = "";
			[Bindable] public var currentFileObj:Object  = new Object();
			[Bindable] public var currentUser:ObjectProxy = new ObjectProxy();  
			[Bindable] public var currentFile:ArrayCollection;
			[Bindable] public var cXML:XML;  
			[Bindable] public var config:Object;
			[Bindable] public var lang:Object;     
			[Bindable] public var splash:Object;
			
			[Bindable]public var gearsStatus:Boolean;	
			[Bindable]public var adminStatus:Boolean;
			[Bindable]public var authStatus:Boolean;	
			[Bindable]public var logonOffStatus:Boolean;
			[Bindable] public var URLvid:String;
			public var currentFileUID:String;    
			
			[Embed(source="assets/gears_installed.png")]
			[Bindable]
			public var gearsYES:Class;
			
			[Embed(source="assets/gears_none.png")]
			[Bindable]
			public var gearsNo:Class;
			
			// initial function to setup UI
			public function main_init():void  
			{
				
				// Set UI defaults until Config loaded
				versionNumber.visible = false;
				site_showStats.visible = false;
				site_showStats.visible = false;
				displayUserName.visible = false;
				currentUser.name = "admin";
				// get voucher URL and Gears status 
				getVoucher();
				
			}	     
			
			// HTTPservice result from main_init
			// returns all config data and SAML authentication information and voucher (if applicable) status in one result
			public  function resultInit(event:ResultEvent):void
			{
				
				
				// Returns all initialisation data   
				var rawData:String = String(event.result); 
				
				// try/catch incase PHP returns configuration data did not return as valid JSON - Typically means there is an error in the config file.	
				try {
					var tempObj:Object = JSON.decode(rawData);//currentFileObj = JSON.decode(rawData);
				}
				catch (erObject:Error) {
					// display error in config
					logProcess("Error Loading Config :"+ event.result.toString());
					currentState = "Message";
					MessageLabel.htmlText = "There has been an error loading configuration data. Please check Log File<BR><BR>";
					if(FlexGlobals.topLevelApplication.parameters.flexerrors ) {
						MessageLabel.htmlText += event.result.toString();
					}
					return;	 
				} 
				// load language object
				lang = JSON.decode(tempObj["lang"]);					 	// Language	 
				
				// check gears status (this calls a javascript function that checks if google gears is active for this client)
				gearsActive(gearsStatus);
				
				// default name incase voucher 
				currentUser.name = "Guest";  
				
				// load statistics information string
				statsData = tempObj["statsdata"].toString();	
				
				// load splash screen string
				splash = JSON.decode(tempObj["splash"]);	
				
				// Set Auth Type
				// check if NOT saml or voucher authenticated - defaults to logon
				if(!tempObj["samlauth"] && !tempObj["voucherauth"]) 
				{
					authStatus = false;
					
					currentState = "Message";
					
					// setup UI for logon
					btnVouchers.visible = false;
					btnNew.visible = false;
					btnMyFiles.visible = false; 
					MessageLabel.height = 0;
					currentState = "Message";
					
					return;	
					
				} else 
				{
					authStatus = true;
				}
				
				// if config returned as false then there is an error in config
				if(tempObj["config"] == "false") {
					logProcess("Error in Configuaration :"+ event.result.toString());
					currentState = "Message";
					MessageLabel.htmlText = "There has been an error loading configuration data. Please check Log File<BR><BR>";
					btnLogon.visible = false;
					return;
				} else {
					// load config object
					config = JSON.decode(tempObj["config"]);
				}
				
				// Voucher UI setup
				if(tempObj["voucherauth"]) {
					//logProcess("Voucher is Authenticated");
					var urlRedirect:URLRequest = new URLRequest("invalidvoucher.php"); 
					
					if(tempObj["voucher"].toString() == "found") {
						// get the voucher and use it
						getFile(); 
						return;
					}
					if(tempObj["voucher"].toString() == "invalid") {
						// voucher invalid
						currentState = "Message";
						MessageLabel.text = "This voucher is no longer available";
						//navigateToURL(urlRedirect,"_parent");  
					}
					if(tempObj["voucher"].toString() == "notfound") {
						// voucher not found 
						currentState = "Message";
						MessageLabel.text = "This voucher is no longer available";
						//navigateToURL(urlRedirect,"_parent");  
					}
				}
				
				// if SAMLAuth
				if(tempObj["samlauth"]) {
					//logProcess("SAML is Authenticated");
					logonOffStatus = true;
					// load user data
					var tempUser:Object = JSON.decode(tempObj["authUser"]);
					
					// if any of the information below is not available then there has been an issue providing data from SAML
					try {
						currentUser.email = tempUser.email.toString();       
						currentUser.name = tempUser.cn.toString();   
						currentUser.SessionID =  tempUser.SessionID.toString();
						currentUser.eduPersonTargetedID = tempUser.eduPersonTargetedID.toString();
					}
					
					// Notify user that there is an error in IDP provided information
					catch(erObject:Error) 
					{
						adminStatus = false;
						authStatus = false; 
						logProcess("Information missing from IDP");
						Alert.show("Although you have authenticated with an Identity Provider. It appears your IdP has not provided enough information for this application to continue","Error: Contact Administrator")
						return;
					}
					
					btnVouchers.visible = true;
					btnNew.visible = true; 
					btnLogonOff.visible = true; 
					btnMyFiles.visible = true;
					
					// check if admin
					if(tempObj["authIsAdmin"]) { 
						adminStatus = true;  
					}     
					
					// load correct state if google gears is enabled - load gears state - no google gears then load flash upload state
					if(gearsStatus == true) 	
					{
						currentState="gearsUpload";
					} else {
						currentState="Upload";
					}  
				}
				logProcess("user Logged on");
			}
			
			// call to javascript to get the current voucher id (vid) from the url if it exists
			public function getVoucher():void
			{
				addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE,handleStateChange); 
				if (ExternalInterface.available)
				{
					
					ExternalInterface.addCallback("checkVoucher", checkVoucher);
					ExternalInterface.call("gup('vid')"); 
					
				} else {
					// no external interface so cannot proceed
					// suggests javascript is not enabled on browser
					
					fatalError("Javascript not enabled - you cannot use file Sender"); 
				}
			}
			
			// HTTP service call for voucher data
			public function getFile():void
			{
				var objSend:Object = new Object();
				objSend.call = "getFile";
				file_main.send(objSend);
			}
			
			// Redirect for logon to SimpleSAML
			public  function resultLogon(event:ResultEvent):void
			{
				var urlRedirect:URLRequest = new URLRequest( event.result.toString()); 
				navigateToURL(urlRedirect,"_parent");  
				
			}
			
			// redirect to aboutLink
			public  function aboutLink():void
			{
				var urlRedirect:URLRequest = new URLRequest(splash.aboutURL);  
				navigateToURL(urlRedirect,"_blank");  
				
			}
			
			// redirect to help link
			public  function helpLink():void 
			{
				
				var urlRedirect:URLRequest = new URLRequest(splash.helpURL); 
				navigateToURL(urlRedirect,"_blank");   	
			}
			
			// HTTPService result from voucher call 
			// this function checks the voucher status
			// "available" - goes to download state to allow user to download the file
			// "voucher" - user can upload a file using the voucher
			// 
			public  function resultFile(event:ResultEvent):void
			{
				
				var rawData:String = String(event.result);
				currentFileObj = JSON.decode(rawData);
				currentFileObj = currentFileObj[0];
				// status of file 
				// - available then go to download page
				// - closed - show voucher unavailable
				
				var status:String = currentFileObj.filestatus.toString();
				var fileName:String = "";
				
				if(currentFileObj.fileoriginalname) {
					fileName = currentFileObj.fileoriginalname.toString();
				}
				if(status == "Available") 
				{ 
					currentState = "filedownload";
					return;	  
				}
				
				if(status == "Voucher")
				{ 
					// hide logoff
					btnLogonOff.visible = false;   			
					if(gearsStatus == true) 
					{
						currentState="gearsUpload"; 
					} else {
						currentState="Upload";
					}  
					return;	  
					
				} 
				
				// display closed messages
				if(status == "Closed" && fileName != "") 
				{
					currentState = "Message";
					MessageLabel.text = "This file/voucher is no longer available";
					return;	
				}   
				if(status == "Voucher Cancelled" )  
				{  
					currentState = "Message"; 
					MessageLabel.text = "This voucher has been cancelled"; 
					return;	
				}
				if(status == "Closed" )  
				{
					currentState = "Message";
					MessageLabel.text = "This voucher has already been used";
					return;	
				}	
			}
			
			// HTTPService has an error - this is a server error and PHP would log an error
			public  function resultError(event:FaultEvent):void
			{
				Alert.show("ERROR:"+event.fault.toString());
			}
			
			// check if vid from javascript is returned
			public function checkVoucher(vid:String,gStatus:Boolean):void
			{ 
				
				if(vid == "") {
					URLvid = ""; 
					logProcess("No Voucher Returned");
				} else {
					//logProcess("Voucher Returned as " + vid.toString());
					URLvid = "?vid="+vid; 
				} 
				
				gearsStatus = gStatus;
				
				var objSend1:Object = new Object();
				objSend1.call = "getInit"; 
				init_main.send(objSend1); 
			}
			
			// setup gears UI
			public	function gearsActive(gears:Boolean):void
			{
				// change browse and upload to use gears function
				if(gears){
					gearsImage.source = gearsYES; 
					gearsImage.toolTip = "Installed: Gears allows you to upload extremely large files";
					logProcess("Gears Installed");
				}
				else 
				{
					// use standard flash filereference upload
					gearsImage.source = gearsNo;  
					gearsImage.toolTip = "NOT Installed: Install Gears to allow uploading of extremely large files. http://gears.google.com/";
					logProcess("NO Gears");
				} 
			}
			
			// redirect for gears install link
			public	function installGears():void
			{   
				// goto gears install URL
				var urltest:URLRequest = new URLRequest(splash.gearsURL); 
				navigateToURL(urltest,"_blank");  
			}
			
			// whenever a state changes initialise the states UI  
			public function handleStateChange(event:StateChangeEvent) :void
			{
				//
				CursorManager.removeBusyCursor();
				ff_fix.ff_fixStatus();
				if(currentState=="Upload"){
					// run init for Upload
					upload_std.init();
				}
				if(currentState=="gearsUpload"){
					// run init for gearsUpload
					upload_gears.init();
				}
				if(currentState=="filedownload"){
					// run init for filedownload
					download_std.init();
				}
				if(currentState=="vouchers_fed"){
					// run init for vouchers_fed
					vouchers.init();
				}
				if(currentState=="admin"){
					// run init for Upload
					admin.init();
				} 
				if(currentState=="my_files"){
					// run init for Upload
					myfiles.init();
				} 
				
				if(currentState=="Message"){
					// run init for Upload
					if(authStatus) {
						siteDomain.visible = false;
						siteSplash.visible = false;
					} else {
						//MessageLabel.text = "";
						siteDomain.visible = true;
						siteSplash.visible = true;
					};
				} 
			}
			
			// when upload complete - update UI
			public function uploadStopped():void 
			{
				btnAdmin.enabled = true;
				btnNew.enabled = true;
				btnVouchers.enabled = true;
				btnLogonOff.enabled = true;
				btnMyFiles.enabled = true;
				
			} 
			
			// when upload started - update UI
			public function uploadStarted():void 
			{
				btnAdmin.enabled = false;
				btnNew.enabled = false;
				btnVouchers.enabled = false;
				btnMyFiles.enabled = false;
				btnLogonOff.enabled = false;
				
			} 
			
			// Not used - depricated
			public function returnFiles(event:ResultEvent):void 
			{
				
				if (event.result.toString() == ""){ 
					currentState="Message";
					MessageLabel.text = "This voucher is no longer valid"; 
					logProcess("Voucher No Longer Valid");
				} else {
					
					var currentArray:ArrayCollection = new ArrayCollection(ArrayUtil.toArray(event.result));
					currentFileObj = currentArray[0];
					currentFileUID = currentFileObj.fileuid.toString();
					
					if(currentFileObj.filestatus.toString() == "Available"){
						currentState="filedownload"; 
					} 
					
					if(currentFileObj.filestatus.toString() == "Voucher"){ 
						// replace from with voucher users email
						
						// show upload based on gears
						if(gearsStatus == true)
						{
							currentState="gearsUpload";
						} else {
							currentState="Upload";
						}
					}	 
					
					if(currentFileObj.filestatus.toString() == "Closed"){
						MessageLabel.text = "This voucher is no longer valid";
						currentState="Message";
					}	
				}
			}
			
			
			// ---------
			// FAULT Handler for logging HTTP requests
			// ---------
			public function faultHandler(event:FaultEvent):void 
			{
				logProcess("Error : " +  event.fault.toString());
				Alert.show("Fault",  event.fault.toString());
			}
			
			// called by logon button
			public function logon():void
			{
				logProcess("Attempt Logon");
				var objSend:Object = new Object();
				objSend.call = "logon";
				logon_main.send(objSend);		
			}
			
			// not authenticated - update UI and display relevant message
			public function noAuth(msg:String):void
			{
				authStatus = false;
				logonOffStatus = false;
				currentState="Message";
				siteSplash.visible = true;
				MessageLabel.text = msg;
				btnAdmin.visible = false;
				btnNew.visible = false;
				btnVouchers.visible = false; 
				btnMyFiles.visible = false;
				displayUserName.visible = false;	
			}
			
			// called by logoff button
			public function logoff(msg:String):void 
			{
				//noAuth(msg);
				var objSend:Object = new Object();
				objSend.call = "logoff";
				logon_main.send(objSend);
			} 
			
			// recheck that user is still authenticated before allowing new upload
			public function newUpload():void
			{ 
				// check if authenticated before opening upload pages
				var objSend:Object = new Object();
				objSend.call = "getAuth";
				checkAuth.send(objSend);
			} 
			
			// if HTTPService - returns admin then update UI
			public function resultAuthAdmin(event:ResultEvent):void 
			{
				
				if(event.result.toString() == "1") {
					if(currentState == "admin" )
					{
						admin.init();	
					}else {
						currentState = "admin";
					}
				} else {
					noAuth(lang.notAuthenticated);
				}
			} 
			
			// if HTTPService - returns authenticated then update UI
			public function resultAuth(event:ResultEvent):void 
			{
				//Alert.show(event.result.toString());
				if(event.result.toString() == "1") {
					if(gearsStatus)
					{
						currentState="gearsUpload";	
						upload_gears.init();
					} else {
						currentState="Upload";	
						upload_std.init();	
					}  
				} else {
					noAuth(lang.notAuthenticated);
				}
			}
			
			// check auth before allowing admin
			public function adminClick():void
			{
				
				var objSend:Object = new Object();
				objSend.call = "getAuthAdmin";
				checkAuthAdmin.send(objSend);
				
			}
			
			// fatal error display function
			public function fatalError(error:String):void
			{
				logProcess("Error : " + error.toString());
				currentState="Message";
				MessageLabel.text = error;
			}
			
			// corrects keyboard characters entered when using linux
			// use a listener to check what characters a pressed and updates text as it is typed in
			public function correctLinux(e:Event):void
			{
				// if linux then fix Norwegian keyboard characters
				
				if(Capabilities.os.indexOf("Linux") == 0) 
				{
					
					var input:String = e.currentTarget.text; 
					
					input = input.split("Ã¸").join("ø");
					input = input.split("Ã¦").join("æ");
					input = input.split("Ã¥").join("å"); 
					input = input.split("Ã©").join("é");
					//input = input.split("Ã©").join("œ"); // check this one
					input = input.split("Ã˜").join("Ø");
					input = input.split("Ã…").join("Å");
					//input = input.split("Ã©").join("Œ"); // check this one
					input = input.split("Ã†").join("Æ");
					input = input.split("Â¨").join("¨"); 
					input = input.split("Ã¤").join("ä");
					input = input.split("Ã«").join("ë");
					input = input.split("Ã¶").join("ö");
					
					input = input.split(String.fromCharCode(3) + "@").join("@");
					input = input.split(String.fromCharCode(3) + "$").join("$");
					input = input.split(String.fromCharCode(3) + "£").join("£");
					input = input.split(String.fromCharCode(3) + "€").join("€");
					input = input.split(String.fromCharCode(3) + "{").join("{");
					input = input.split(String.fromCharCode(3) + "}").join("}");
					input = input.split(String.fromCharCode(3) + "[").join("]");
					input = input.split(String.fromCharCode(3) + "]").join("]");
					input = input.split(String.fromCharCode(3) + "Â´").join("´");
					input = input.split(String.fromCharCode(3) + "Â`").join("`");
					// need to do pound
					
					input = input.split(String.fromCharCode(3) + "~").join("~");
					//input = input.split(" ").join(""); 
					e.currentTarget.text = input;
				}
			}  
			
			// log client process
			public function logProcess(message:String):void
			{
				
				// force log to keep session alive
				
				// check if client logging is on
				if((splash && splash.client_specific_logging) || message == "Keep Session Alive - Flash Upload" ) 
				{
					var objSend:Object = new Object();
					objSend.call = "log_process";
					objSend.message = message;
					
					objSend.client = "Guest";
					var comparisonid:String = ""; // used to store the current userid or voucher id
					
					// check if the client_specific_logging is a client or voucher
					if(currentFileObj && currentFileObj.filestatus == "Voucher")
					{
						comparisonid = currentFileObj.filevoucheruid;
						objSend.client = "Voucher-"+currentFileObj.filevoucheruid;
						
					} else if (currentUser && currentUser.eduPersonTargetedID){
						
						comparisonid = currentUser.eduPersonTargetedID;
						objSend.client =  currentUser.name.replace(" ","-");
					}
					
					// check if comparisonid is in splash.client_specific_logging_uids
					
					if(splash.client_specific_logging_uids.search(comparisonid) > -1 || splash.client_specific_logging_uids == "" || message == "Keep Session Alive - Flash Upload")
					{
						log_process.send(objSend);
					}
				}
			}
			
			// HTTPRequest result from log
			public function resultlog(event:ResultEvent):void 
			{
				// return from writing process log
			} 
			
		]]> 
		
	</mx:Script>   
	<mx:HTTPService id="init_main" url="../fs_main.php{URLvid}" useProxy="false" method="POST" resultFormat="text" result="resultInit(event)" fault="resultError(event)"/> 
	<mx:HTTPService id="checkAuth" url="../fs_main.php{URLvid}" useProxy="false" method="POST" resultFormat="text" result="resultAuth(event)" fault="resultError(event)"/> 
	<mx:HTTPService id="checkAuthAdmin" url="../fs_main.php{URLvid}" useProxy="false" method="POST" resultFormat="text" result="resultAuthAdmin(event)" fault="resultError(event)"/> 
	<mx:HTTPService id="file_main" url="../fs_main.php{URLvid}" useProxy="false" method="POST" resultFormat="text" result="resultFile(event)" fault="resultError(event)"/>  
	<mx:HTTPService id="logon_main" url="../fs_main.php{URLvid}" useProxy="false" method="POST" resultFormat="text" result="resultLogon(event)" fault="resultError(event)"/>     
	<mx:HTTPService id="log_process" url="../fs_main.php{URLvid}" useProxy="false" method="POST" resultFormat="text" result="resultlog(event)" fault="faultHandler(event)"/>     
	
	<mx:NumberFormatter id="numberFormatter" precision="2" useThousandsSeparator="true" useNegativeSign="true"/>
	<mx:DateFormatter id="df" formatString="{config.datedisplayformat}"/>
	<mx:DateFormatter id="df_pg" formatString="{config.datedisplayformat}"/>
	<mx:DateFormatter id="df_pg_timestamp" formatString="YYYY-MM-DD"/>  
	<mx:VBox left="4" right="4" id="vbox1" backgroundColor="#FFFFFF" bottom="0" verticalAlign="top" top="0">     
		<mx:HBox height="53" verticalAlign="middle" width="100%">  
			<mx:Spacer width="100%" id="spacer1"/> 
			<mx:Label id="totalMemory" visible="false"
					  text="{(System.totalMemory / 1024) + ' KB'}"
					  render="totalMemory.text = (System.totalMemory / 1024) + ' KB'" />	
			<mx:Button label="{lang.Admin}" id="btnAdmin" click="adminClick()" visible="{adminStatus}" icon="@Embed(source='assets/arrow_refresh.png')"/>
			<mx:Button label="{lang.New_File}" id="btnNew" click="newUpload()" visible="false"/>
			<mx:Button label="{lang.Vouchers}" id="btnVouchers" click="currentState=&quot;vouchers_fed&quot;;" visible="false"/>
			<mx:Button label="{lang.My_Files}" id="btnMyFiles" click="currentState=&quot;my_files&quot;;" visible="false"/>
			<mx:Button label="{lang.Log_Off}" id="btnLogonOff" click="logoff('')" visible="{logonOffStatus}"/>
			<mx:Image id="gearsImage"  useHandCursor="true" buttonMode="true" click="installGears()"/>  
		</mx:HBox> 
		<mx:HBox width="100%" height="20" id="hbox0" borderStyle="none" verticalAlign="middle">
			<mx:Label text="{lang.Welcome} {currentUser.name} " id="displayUserName" visible="{config.displayUserName}"/>
			<mx:Spacer width="100%"/>
			<mx:Label textAlign="right" fontStyle="normal" id="site_showStats" fontWeight="normal" text="{statsData} " visible="{config.site_showStats}" includeInLayout="{config.site_showStats}"/>
			<mx:Label text="1.0.0 dev   |" id="versionNumber" visible="{config.versionNumber}" includeInLayout="{config.versionNumber}"/>
			<mx:Label text=" Help" click="helpLink()" buttonMode="true" useHandCursor="true" mouseChildren="false" toolTip="Help with this application"  id="label3"/>
			<mx:Label text="| About" click="aboutLink()" buttonMode="true" useHandCursor="true" mouseChildren="false" toolTip="Information about this application"  id="label2"/>
		</mx:HBox>
		<mx:Spacer height="100%" id="spacer2"/> 
	</mx:VBox>
</mx:Application>
