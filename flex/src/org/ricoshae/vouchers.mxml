<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="100%" height="100%" title="{lang.Vouchers}">

<mx:Script>
    <![CDATA[
     
 /* 
 *  Filsender www.filesender.org
 *      
 *  Copyright (c) 2009-2010, Aarnet, HEAnet, UNINETT
 * 	All rights reserved.
 *
 * 	Redistribution and use in source and binary forms, with or without
 *	modification, are permitted provided that the following conditions are met:
 *	* 	Redistributions of source code must retain the above copyright
 *   		notice, this list of conditions and the following disclaimer.
 *   	* 	Redistributions in binary form must reproduce the above copyright
 *   		notice, this list of conditions and the following disclaimer in the
 *   		documentation and/or other materials provided with the distribution.
 *   	* 	Neither the name of Aarnet, HEAnet and UNINETT nor the
 *   		names of its contributors may be used to endorse or promote products
 *   		derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Aarnet, HEAnet and UNINETT ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Aarnet, HEAnet or UNINETT BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
   
        import mx.controls.Alert;
        import com.adobe.serialization.json.JSON;
		import org.ricoshae.core.*;
		import mx.core.FlexGlobals;
		import mx.collections.ArrayCollection;
		import mx.utils.UIDUtil;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		import mx.events.CloseEvent;
		import mx.utils.ArrayUtil;
		import mx.managers.CursorManager;
		
		[Bindable] public var currentFileObj:Object  = new Object();
		[Bindable] public var currentUserObj:Object = new Object();
		[Bindable] public var config:Object;
		[Bindable] public var usersFiles:ArrayCollection;
		[Bindable] public var lang:Object;
		[Bindable] public var URLvidLocal:String;
		public var dateRange:Object;
		public var currentDate:Date = new Date();
		
	public function init():void
		{ 
			ff_fix.ff_fixStatus();
			lang = FlexGlobals.topLevelApplication.lang;
			CursorManager.removeBusyCursor();
			currentUserObj = FlexGlobals.topLevelApplication.currentUser;
			URLvidLocal = FlexGlobals.topLevelApplication.URLvid;
			config = FlexGlobals.topLevelApplication.config;
			currentFileObj = new Object();
			currentFileObj.fileuid = UIDUtil.createUID();
			var d:Date=new Date();
			
			dateRange = new Object();
			dateRange["rangeStart"] = new Date(currentDate.fullYear,currentDate.month, currentDate.date + 1); // disable parevious and todays date
			dateRange["rangeEnd"] = new Date(d.fullYear,d.month, d.date+parseInt(config.default_daysvalid.toString()));
			voucherValidDate.selectableRange= dateRange;
			
			voucherValidDate.selectedDate = new Date(d.fullYear,d.month, d.date+ parseInt(config["default_daysvalid"]));
			// load current vouchers
			voucherEmails.text = "";
			 
			var objSend:Object = new Object();
	   		objSend.call = "getVouchers";
	   		objSend.userEmail = currentUserObj.email;
	   		vouchers_main.send(objSend);
	   		
			}
		public function completeVoucher(event:ResultEvent):void 
		{ 
			CursorManager.removeBusyCursor();
			// check if error saving voucher
		if(!event.result){
			Alert.show("Unable to create voucher");
		} else {
			Alert.show("Voucher has been sent");   
		} 
		init();     
		}   
		 
	public function returnVouchers(event:ResultEvent):void  
		{   
			//Alert.show(event.result.toString());  
			//return;  
			var rawData:String = String(event.result); 
			CursorManager.removeBusyCursor();
			
			try {
				usersFiles = new ArrayCollection(ArrayUtil.toArray(JSON.decode(rawData)));
				ff_fix.ff_fixStatus();
			}
			catch (erObject:Error) {
				FlexGlobals.topLevelApplication.currentState = "Message";
				FlexGlobals.topLevelApplication.noAuth(lang.notAuthenticated);
				//FlexGlobals.topLevelApplication.MessageLabel.htmlText = "There has been an error loading voucher data. Please check Log File<BR><BR>";
				//if(FlexGlobals.topLevelApplication.parameters.flexerrors ) {
				//	FlexGlobals.topLevelApplication.MessageLabel.htmlText += event.result.toString();
				//}
				return;	
			}
			 
		} 
		
			public function returnInsertedVoucher(event:ResultEvent):void 
		{
			// Show any error results by call an error function or true if no errors 
			
			//Alert.show(event.result.toString());
			Alert.show(lang.Voucher_Sent);
			init();
		
		}
		 
	public function returnMail(event:ResultEvent):void 
		{
			Alert.show(event.result.toString());
			CursorManager.removeBusyCursor(); 
		}  
	        
	  public function return_error(event:FaultEvent):void
			{
			CursorManager.removeBusyCursor();
			Alert.show("Fault: " + event.fault);			 	 
			}

    public function createVouchers():void
	        {
	        	// create vouchers
	        	// validate each email address before sending
	        	if(voucherValidDate.text.toString() == "")
	        	{
	        	var d:Date=new Date();
				voucherValidDate.selectedDate = new Date(d.fullYear,d.month, d.date+30);
	        	}
	        	
	        	if(FS_Validation.isValidEmailList(voucherEmails.text.toString(),","))
	        	{
	        	
    			var temptext:String = voucherEmails.text;
    		 	var pattern:RegExp = /,/gi;
    			temptext = temptext.replace(pattern," ");
    			pattern = /;/gi;
    			temptext = temptext.replace(pattern," ");
    			var params:Array = temptext.split(' ');
        		if(params.length > config["max_email_recipients"] )
        		{
        			Alert.show(lang['E022']+ config["max_email_recipients"],lang['E000']);
        			return;
        		}
        		for (var i:int = 0; i < params.length; i++)
       		{
       			var UID:String = UIDUtil.createUID();
            		if(params[i].replace(" ","").length > 0)
       			{
       		
            		saveVoucher(params[i].toString(),UID);
          		}	
        	}    
    			// on complete sending all emails
    			//voucherEmails.text = "";
    			//Alert.show("Email(s) Sent");
    			//init();
    			} 
    			 else {
					 Alert.show(lang['E018'],lang['E000']); // check email address
	        	}
	        } 
        	      
	public function functionNameBtn():void   
		{  
		     // delete this item the refresh list	
			Alert.show("Are you sure?", "Delete Voucher", Alert.OK | Alert.CANCEL,null,OK_DeleteVoucher);
	    }   	   
        	   
    public function OK_DeleteVoucher(event:CloseEvent):void    
		{
	      	if (event.detail == Alert.OK) {        		
	      		
	      	var objSend:Object = new Object();
	   		objSend.call = "deleteVoucher";
	   		objSend.svid = usersFiles[vouchers_dg.selectedIndex].fileid;
	   		delete_main.send(objSend);
       		
       		}
	 	}
	public function deletedVoucher(event:ResultEvent):void
		{ 
		
	    	if(event.result){
	    	//FlexGlobals.topLevelApplication.saveLogs(usersFiles[vouchers_dg.selectedIndex] as Object,"Voucher","Voucher Deleted");
	       	init();
	       	//voucherEmails.text = "";
	       	} else {
	    	Alert.show("Unable to delete voucher");
	       	}
	    }  	        
	
	public function saveVoucher(mailTo:String,VoucherUID:String):void 
	        {
	        var myDate:Date = new Date();  
	        var obj:Object = new Object();
			obj.fileto = mailTo;
			obj.filefrom = currentUserObj.email;  
			obj.fileuid = UIDUtil.createUID(); 
			obj.filesubject = "Voucher";
			obj.filemessage = "";     
			obj.filevoucheruid = VoucherUID; // new voucher for each item
			obj.fileexpirydate = voucherValidDate.text.toString();
			obj.filesize = 0;
			obj.fileoriginalname = ""
			obj.filestatus = "Voucher";
			obj.fileserverpath = "";  
			obj.fileip4address = "";
			obj.fileip6address = "";   
			obj.filesendersname = "";  
			obj.filereceiversname = ""; 
			obj.filevouchertype = "";  
			obj.fileactivitydate = df_pg.format(myDate);
	        // send
	       // FlexGlobals.topLevelApplication.saveLogs(obj,"Voucher","Voucher Created");
	       //Alert.show(obj.toString());

	   		 	var objSend:Object = new Object();
	   			objSend.call = "insertFile";
	   			 var dataArray:ArrayCollection = new ArrayCollection();
	        	dataArray.addItem(obj);
	      		var dataString:String = JSON.encode(dataArray.toArray());
	   			dataString = escape(dataString);
	   			objSend.jsonSendData = dataString;
	   			file_main.send(objSend);
	        }	
		private function dateFunc( item:Object, column:DataGridColumn):String
		{
			return df.format( item[column.dataField]); 
		}
     ]]>    
  </mx:Script> 
<mx:HTTPService id="vouchers_main" url="../fs_main.php{URLvidLocal}" useProxy="false" method="POST" resultFormat="text" result="returnVouchers(event)" fault="return_error(event)"/>     
<mx:HTTPService id="file_main" url="../fs_main.php{URLvidLocal}" useProxy="false" method="POST" resultFormat="text" result="returnInsertedVoucher(event)" fault="return_error(event)"/>     
<mx:HTTPService id="delete_main" url="../fs_main.php{URLvidLocal}" useProxy="false" method="POST" resultFormat="text" result="deletedVoucher(event)" fault="return_error(event)"/>     
  <mx:NumberFormatter id="numberFormatter" precision="2" useThousandsSeparator="true" useNegativeSign="true"/>
 <mx:DateFormatter id="df" formatString="{config.datedisplayformat}"/>
 <mx:DateFormatter id="df_pg" formatString="{config.datedisplayformat}"/> 
	<mx:Canvas right="10" left="10" bottom="10" top="10">
		<mx:VBox left="6" right="6" bottom="6" borderStyle="none" verticalAlign="top" top="0">
		  <mx:TextArea width="100%" htmlText="{lang.site_voucherinstructions}" editable="false" height="60" borderStyle="none"/>
		  <mx:HBox width="100%" height="30" borderStyle="solid" verticalAlign="middle">
		    <mx:Label text="{lang.Send_Vouchers_to}:"/>
		    <mx:TextInput width="100%" id="voucherEmails"  toolTip="Multiple email address can be entered seperated by comma (,)" change="FlexGlobals.topLevelApplication.correctLinux(event)"/>
		    <mx:Label text="Valid to:" textAlign="right"/>
		    <mx:DateField id="voucherValidDate"  formatString="{config.datedisplayformat}"/>
		    <mx:Button label="{lang.Send_Voucher}" click="createVouchers()" id="sendVoucher_btn" enabled="true"/>
		  </mx:HBox> 
		  <mx:Label text="{lang.Current_Valid_Vouchers}"/>
		  <mx:DataGrid width="100%" height="100%" id="vouchers_dg" dataProvider="{usersFiles}">
		    <mx:columns>
		      <mx:DataGridColumn headerText="{lang.To}" dataField="fileto" />
		      <mx:DataGridColumn headerText="{lang.From}" dataField="filefrom"/>
		      <mx:DataGridColumn headerText="{lang.Voucher_Sent}" dataField="fileactivitydate" labelFunction="dateFunc"/>
		      <mx:DataGridColumn headerText="{lang.Valid_To}" dataField="fileexpirydate" labelFunction="dateFunc"/>
		      <mx:DataGridColumn width="20">
		        <mx:itemRenderer>
		          <mx:Component> 
		            <mx:Button  icon="@Embed(source='/assets/shape_square_delete.png')" height="20" width="20" label="Delete" click="outerDocument.functionNameBtn()"/>
		          </mx:Component>
		        </mx:itemRenderer>
		      </mx:DataGridColumn>
		    </mx:columns>
		  </mx:DataGrid>  
		</mx:VBox>
	    
	</mx:Canvas>
	
</mx:Panel>
