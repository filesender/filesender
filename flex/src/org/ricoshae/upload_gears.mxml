<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="790" height="420" minHeight="420" minWidth="790" title="{lang.Gears_Upload}">
	
	
	<mx:Script>
		<![CDATA[
			
			/*
			* FileSender www.filesender.org
			* 
			* Copyright (c) 2009-2011, AARNet, HEAnet, SURFnet, UNINETT
			* All rights reserved.
			* 
			* Redistribution and use in source and binary forms, with or without
			* modification, are permitted provided that the following conditions are met:
			* 
			* *	Redistributions of source code must retain the above copyright
			* 	notice, this list of conditions and the following disclaimer.
			* *	Redistributions in binary form must reproduce the above copyright
			* 	notice, this list of conditions and the following disclaimer in the
			* 	documentation and/or other materials provided with the distribution.
			* *	Neither the name of AARNet, HEAnet, SURFnet and UNINETT nor the
			* 	names of its contributors may be used to endorse or promote products
			* 	derived from this software without specific prior written permission.
			* 
			* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
			* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
			* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
			* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
			* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
			* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
			* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
			* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
			* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*/
			
			/* -----------------------------------------
			* flex - upload file using google gears
			* -----------------------------------------
			* uses externalInterface to communicate with gears javascript
			*/
			
			import com.adobe.serialization.json.JSON;
			import flash.events.TimerEvent;
			import flash.utils.Timer;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.managers.CursorManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.UIDUtil;
			import com.adobe.utils.IntUtil;
			import com.adobe.crypto.*;
			import org.ricoshae.core.*;
			
			[Bindable] public var currentFileObj:Object  = new Object();
			[Bindable] public var currentUserObj:Object = new Object();
			[Bindable] public var config:Object;
			[Bindable] public var lang:Object;
			[Bindable] public var displayprogressBar:Boolean = false;
			[Bindable] public var URLvidLocal:String;
			
			public var currentDate:Date = new Date();
			public  var dateRange:Object;		
			public var resumePosition:int;
			public var tm:Timer;
			[Bindable]
			public var speedString:String;
			public var speed:Number = 0;
			public var currbytes:Number = 0;
			public var lastbytes:Number = 0;
			public var tempFromVoucher:String; // Temp if voucher is cancelled to return correct to and from fields
			public var filenameGearsMD5:String = "";
			
			// initialise all arrays and set button defaults 
			public function init():void
			{
				lang = FlexGlobals.topLevelApplication.lang;
				currentUserObj = FlexGlobals.topLevelApplication.currentUser;
				config = FlexGlobals.topLevelApplication.config;
				URLvidLocal = FlexGlobals.topLevelApplication.URLvid;
				uploadBtn.visible = true;
				displayprogressBar = false;
				cancelBtn.visible = false;
				FlexGlobals.topLevelApplication.logProcess("---------------------------------------");
				FlexGlobals.topLevelApplication.logProcess("Initialise Gears Upload - Gears Upload");
				
				pgBar.label = lang['Uploading'] + " %3%%";
				
				if( config["debug"] == true) 
				{
					tempText.visible = true;	
				} else 
				{
					tempText.visible = false;
				}
				resumePosition = 0;
				
				currentFileObj = new Object();
				if(FlexGlobals.topLevelApplication.currentFileObj.filestatus == "Voucher")
				{
					currentFileObj = FlexGlobals.topLevelApplication.currentFileObj;
					tempFromVoucher = currentFileObj.filefrom;	
					FileFrom.text = currentFileObj.fileto;	
					FileTo.text = "";
					selectedFilename.text = "";
					selectedFileSize.text = "";
					
				} else {
					currentFileObj.fileuid = UIDUtil.createUID();
					currentFileObj.filevoucheruid = UIDUtil.createUID();
					FileFrom.text = currentUserObj.email;	
				}
				
				btUpload.visible = false;
				displayprogressBar = false;
				cancelBtn.visible = false;
				var d:Date=new Date();
				FileExpiryDate.selectedDate = new Date(d.fullYear,d.month, d.date+parseInt(config["default_daysvalid"]));				
				
				dateRange = new Object();
				dateRange["rangeStart"] = new Date(currentDate.fullYear,currentDate.month, currentDate.date+1);
				dateRange["rangeEnd"] = new Date(d.fullYear,d.month, d.date+parseInt(config["default_daysvalid"]));
				FileExpiryDate.selectableRange= dateRange; 
				
				ExternalInterface.addCallback("returnStatus", returnStatus); 
				
				// timer for upload speed
				tm = new Timer( 1000 );
				tm.addEventListener( TimerEvent.TIMER, updateSpeed );
				
				
			} 
			
			// update speed display
			private function updateSpeed( e:TimerEvent ):void
			{
				speed = Math.round( (currbytes - lastbytes)/1024 );
				lastbytes = currbytes;
				if(currbytes) {
					speedString = readablizeBytes(speed)+'/s';
				}
			}     
			
			// call externalInterface to allow gears to select file
			public function startuploadgears():void
			{  
				// select the file
				FlexGlobals.topLevelApplication.logProcess("Select File - Gears Upload");
				ExternalInterface.call("gearsup");
			} 
			
			// start the gears upload process
			public function doGearsUpload():void 
			{
				
				if(FileTo.text == null || FileTo.text == "")
				{
					FlexGlobals.topLevelApplication.logProcess("Email Missing - Gears Upload");
					Alert.show(lang.E018,lang.E000);  // Enter an email address
					return;
				}
				
				if(!FS_Validation.isValidEmailList(FileTo.text,","))
				{
					FlexGlobals.topLevelApplication.logProcess("Invalid Email ["+FileTo.text.toString()+"] - Gears Upload");
					Alert.show(lang['E015'],lang['E000']);
					return;
				} 
				
				// check if too many email addresses
				
				var temptext:String = currentFileObj.fileto;
				var pattern:RegExp = /,/gi;
				temptext = temptext.replace(pattern," ");
				pattern = /;/gi;
				temptext = temptext.replace(pattern," ");
				var params:Array = temptext.split(' ');
				
				if(config["max_email_recipients"] != 0 && params.length > config["max_email_recipients"])
				{
					FlexGlobals.topLevelApplication.logProcess("Too Many Emails - Gears Upload");
					Alert.show(lang['E022']+config["max_email_recipients"],lang['E000']);
					return;
				}
				
				if(config["AuP"] &&   !AuPCB.selected) 
				{
					FlexGlobals.topLevelApplication.logProcess("AUP not Selected - Gears Upload");
					Alert.show(lang['E021'],lang['E000']); 
					return ;	
				}
				
				FlexGlobals.topLevelApplication.uploadStarted();
				uploadBtn.visible = false;
				btUpload.visible = false;	      
				ExternalInterface.call("upload('"+currentFileObj.filevoucheruid+"')");
				displayprogressBar = true;
				cancelBtn.visible = true;
			} 
			
			// show upload status 
			private function fnCheckString(str:String):Boolean
			{
				var invalidCharacters:Array = new Array(":", "*", "?", "<", ">", "|","%","'");
				for (var i:Number = 0; i<invalidCharacters.length; i++) {
					if (str.indexOf(invalidCharacters[i])>0) {
						return true; 
					}  
				}
				return false;
			}
			
			// check file extension
			private function fnCheckExtension(str:String):Boolean
			{
				
				// check if extension exists
				var nameParts:Array = str.split(".");
				if(nameParts.length < 2){
					return true;
				}
				
				// check if extension is listed in banned file types
				var invalidExtension:String = config["ban_extension"];
				if (invalidExtension.indexOf(nameParts[nameParts.length-1].toString())<0) { 
					
					return false; 
				}
				FlexGlobals.topLevelApplication.logProcess("Invalid Extension ["+nameParts[nameParts.length-1].toString()+"] - Gears Upload");
				return true;
			}
			
			// whenever external interface is called - all return results come back through this function
			public function returnStatus(sInfo:String,sType:String):void
			{
				//	Alert.show(sType + ":" + sInfo);
				tempText.text = "\n" +sType + ":" + sInfo;
				FlexGlobals.topLevelApplication.logProcess("Gears Notification ["+ sType + ":" + sInfo + "] - Gears Upload");
				
				// logging messages from gears
				if(sType == "msg")
				{
					FlexGlobals.topLevelApplication.logProcess("Gears Notification ["+ sType + ":" + sInfo + "] - Gears Upload");
				}
				
				// filename returned from gears browse
				if(sType == "filename")
				{
					FlexGlobals.topLevelApplication.logProcess("File Selected ["+sInfo.toString()+"] - Gears Upload");
					//check for invalid file name characters
					if (fnCheckString(sInfo.toString()))
					{
						Alert.show("Invalid File Name (Must no contain the following charachters : * ? < > | % '","Invalid Filename");
						return;
					} 
					
					if (fnCheckExtension(sInfo.toString()))
					{
						FlexGlobals.topLevelApplication.logProcess("Invalid Extension Selected ["+sInfo.toString()+"] - Gears Upload");
						Alert.show("File Extension type is invalid or is missing. You may like to zip the file and try again","Invalid File Extension");
						return;
					} 
					
					// mac curently cannot upload over 2GB using gears
					// notify user if over 2GB
					if(flash.system.Capabilities.os.substr(0, 3) == "Mac" && currentFileObj.filesize > 2000000000 )
					{
						FlexGlobals.topLevelApplication.logProcess("File is too large for Gears on Mac upload - Gears Upload");
						Alert.show(lang['E032']);
						return;
					}
					
					if(currentFileObj.filesize == 0 ) 
					{
					return;	
					}
					
					selectedFilename.text = sInfo.toString();
					currentFileObj.fileoriginalname = sInfo.toString();		 
					btUpload.visible = true;
					
					// generate file md5 from 
					filenameGearsMD5 = "";
					if(currentFileObj.filestatus == "Voucher")
					{
						filenameGearsMD5 +=  currentFileObj.filevoucheruid;	
					} else {
						filenameGearsMD5 += currentUserObj.eduPersonTargetedID;
					}
					filenameGearsMD5 += currentFileObj.fileoriginalname ;
					filenameGearsMD5 += currentFileObj.filesize;
					
					filenameGearsMD5 = MD5.hash(filenameGearsMD5)+ ".tmp"; 
					
					// get file size
					FlexGlobals.topLevelApplication.logProcess("Get File Size - Gears Upload");
					var objSend1:Object = new Object();
					objSend1.call = "getFileSize";
					objSend1.filename = filenameGearsMD5;//currentFileObj.fileoriginalname;
					filesize_main.send(objSend1);
				} 
				
				// gears error returned
				if(sType == "error")
				{
					FlexGlobals.topLevelApplication.logProcess("Error in Gears Upload [" + sInfo.toString() + "] - Gears Upload");
					FlexGlobals.topLevelApplication.fatalError(lang['E016']);
				}
				
				// not authenticated in gears
				if(sType == "errorauth")
				{
					FlexGlobals.topLevelApplication.logProcess("Error authenticating user in Gears Upload [" + sInfo.toString() + "] - Gears Upload");
					FlexGlobals.topLevelApplication.fatalError(lang['E029']);
				}
				
				// file size returned from gears 
				if(sType == "filesize")
				{
					currentFileObj.filesize = 0;
					FlexGlobals.topLevelApplication.logProcess("File size returned [" + sInfo.toString() + "] - Gears Upload");
					var thefileSize:Number = parseInt(sInfo.toString());
					
					if(thefileSize == 0)
					{
						Alert.show(lang['E030'],lang['E000']);	
						selectedFilename.text = "";
						selectedFileSize.text = "";
						btUpload.visible = false;
						return;
					}
					
					if(parseInt(config["max_gears_upload_size"]) != 0 &&  thefileSize > parseInt(config["max_gears_upload_size"])) 
					{
						FlexGlobals.topLevelApplication.logProcess("File too Large - Gears Upload");
						Alert.show(lang['E003']+ " (Max: " + readablizeBytes(parseInt(config["max_gears_upload_size"])) + ")",lang['E000'] ); 
						return ;	
					}
					
					
					selectedFileSize.text = readablizeBytes(thefileSize);
					currentFileObj.filesize = sInfo.toString();	
				}
				
				// percentage progress returned from gears
				if(sType == "percentage")
				{
					FlexGlobals.topLevelApplication.logProcess("Progress Percentage returned [" + sInfo.toString() + "%] - Gears Upload");
					var percent:Number = parseInt(sInfo.toString())-1;
					pgBar.setProgress(percent,100);
				}
				
				// file completed
				if(sType == "complete")
				{
					
					FlexGlobals.topLevelApplication.logProcess("Upload Complete [" + sInfo.toString() + "] - Gears Upload");
					FlexGlobals.topLevelApplication.logProcess("Attempt to move file - Gears Upload");
					//	Application.application.saveLogs(currentFileObj,"Uploaded","File Uploaded");
					// move file to current data folder
					var objSend:Object = new Object();
					objSend.fileoriginalname = currentFileObj.fileoriginalname;
					objSend.fileuid = currentFileObj.fileuid;
					objSend.call = "moveFile";
					var dataArray:ArrayCollection = new ArrayCollection();
					dataArray.addItem(currentFileObj);
					var dataString:String = JSON.encode(dataArray.toArray());
					dataString = escape(dataString);
					objSend.jsonSendData = dataString;
					movefile_main.send(objSend);
					cancelBtn.visible = false; 
					FlexGlobals.topLevelApplication.uploadStopped(); 
				} 
				
				// Cancelled in gears
				if(sType == "cancelled")
				{
					FlexGlobals.topLevelApplication.logProcess("Upload Cancelled - Gears Upload");
					FlexGlobals.topLevelApplication.uploadStopped(); 
					currentFileObj.filefrom = tempFromVoucher;	
					currentFileObj.fileto = FileFrom.text;
					// reset file size
					currentFileObj.filesize = "";
					currentFileObj.fileoriginalname = "";
					init();
				}
			}
			
			// HTTPService return file moved
			public function filemoved(event:ResultEvent):void 
			{
				// check for move errors      
				if(event.result == false){ 
					FlexGlobals.topLevelApplication.logProcess("Error Moving File - Gears Upload");
					Alert.show(lang['E017']);  // Error moving file
				} else { 
					FlexGlobals.topLevelApplication.logProcess("File Moved OK - Gears Upload");
					fileComplete();
				}
			}   	
			
			// HTTPService file size returned from checking temp folder
			public function fileSizeReturn(event:ResultEvent):void
			{
				
				
				// check for move errors  
				if(event.result.toString() == "error"){
					
					Alert.show("Server Error");
				} else { 
					
					var sizeString:String  = event.result.toString();   
					var myNumber:Number = new Number(sizeString);
					
					FlexGlobals.topLevelApplication.logProcess("Get Resume position:" +myNumber+"["+ currentFileObj.fileoriginalname +"] - Gears Upload");
					// send resume back to gears
					ExternalInterface.call("setResumeposition('"+myNumber+"','"+currentFileObj.fileoriginalname+"')");
					
				} 
			}  
			
			// upload cancelled confirmation
			public function cancelUpload():void
			{
				Alert.show("Are you sure?", "Cancel Upload", Alert.OK | Alert.CANCEL,null,OK_CancelUpload);
			}
			
			// continue cancelling upload
			// notify gears to cancel
			// gears waits till last upload chunk is complete before UI informs file is cancelled 
			public function OK_CancelUpload(event:CloseEvent):void    
			{
				if (event.detail == Alert.OK) {        	
					FlexGlobals.topLevelApplication.logProcess("Cancel Upload - Gears Upload");
					ExternalInterface.call("cancelUpload");
					pgBar.label = "Please wait... Cancelling Upload";
				}
			}
			
			// file upload complete
			public function fileComplete():void 
			{
				FlexGlobals.topLevelApplication.logProcess("File Uploaded > Send emails - Gears Upload");
				// send email to each person in the to box
				
				if (currentFileObj.fileto != null)
				{
					var temptext:String = currentFileObj.fileto;
					
					var params:Array = temptext.split(/,|;/);
					
					var tempCurrentFileObj:Object; 
					
					currentFileObj.filesubject = FileSubject.text;
					currentFileObj.filemessage  = FileMessage.text;  
					currentFileObj.fileexpirydate = FileExpiryDate.selectedDate.toDateString();
					currentFileObj.fileip6address  = " ";
					currentFileObj.filesendersname  = " ";
					currentFileObj.filereceiversname  = " ";  
					currentFileObj.filevouchertype   = " ";
					currentFileObj.fileactivitydate   = "";
					
					if(currentFileObj.filestatus == "Voucher") 
					{	
						currentFileObj.filestatus = "Closed";
						
						var objSend:Object = new Object();
						objSend.call = "closeVoucher";
						var dataArray:ArrayCollection = new ArrayCollection();
						objSend.svid = currentFileObj.fileid;
						send_main.send(objSend);
						
					}
					
					tempCurrentFileObj = currentFileObj;
					tempCurrentFileObj.filestatus = "Available"
					
					for (var i:int = 0; i < params.length; i++)
					{	
						
						if(params[i].replace(" ","").length > 0)
						{	     
							
							tempCurrentFileObj.fileto = params[i].toString();
							
							// check if this is a voucher or an available file
							// close voucher and create new download vouchers
							
							// create new vouchers with unique filevoucheruid's
							
							FlexGlobals.topLevelApplication.logProcess("Send email to ["+ params[i].toString() +"] - Gears Upload");
							
							var UID:String = UIDUtil.createUID(); 
							tempCurrentFileObj.filevoucheruid = UID;
							
							var objSend1:Object = new Object();
							objSend1.call = "insertFile";
							var dataArray1:ArrayCollection = new ArrayCollection();
							dataArray1.addItem(tempCurrentFileObj);
							var dataString1:String = JSON.encode(dataArray1.toArray());
							dataString1 = escape(dataString1);
							objSend1.jsonSendData = dataString1;
							send_main.send(objSend1);
						}	
					}
					// go to sent screen
					
					FlexGlobals.topLevelApplication.currentState = "Message";
					FlexGlobals.topLevelApplication.MessageLabel.text = lang.Your_file_has_been_sent;
				} 
			}  
			
			// HTTPService returns saved file
			public function fileSaved(event:ResultEvent):void
			{
				
				//Alert.show(event.result.toString());
				if(event.result.toString() == 1){
					FlexGlobals.topLevelApplication.logProcess("Email Sent OK  - Gears Upload");
					CursorManager.removeBusyCursor();
					FlexGlobals.topLevelApplication.currentState = "Message";
					FlexGlobals.topLevelApplication.MessageLabel.text = lang.Your_file_has_been_sent;
					init();
				} else {
					FlexGlobals.topLevelApplication.logProcess("Error Sending Email  - Gears Upload");
					FlexGlobals.topLevelApplication.currentState = "Message";
					FlexGlobals.topLevelApplication.MessageLabel.text = lang.E002; 
				}
				ff_fix.ff_fixStatus();
			}
			
			// HTTPService error
			public function fileError(event:FaultEvent):void
			{
				FlexGlobals.topLevelApplication.logProcess("File Error ["+ event.fault.toString() +"]  - Gears Upload");
				Alert.show(event.fault.toString(),"Unknown error");
			} 
			
			// Format file size
			public function readablizeBytes(bytes:Number):String 
			{
				
				var s:Array = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];
				var e:Number = Math.floor(Math.log(bytes)/Math.log(1024));
				return (bytes/Math.pow(1024, Math.floor(e))).toFixed(2)+" "+s[e];
			}
			
			public function validateEmail():void
			{
				if(!FS_Validation.isValidEmailList(FileTo.text,","))
				{
				Alert.show(lang["E033"]);
				//FileTo.setFocus();
				}
			}
		]]> 
		
	</mx:Script> 
	<mx:HTTPService id="send_main" url="../fs_main.php{URLvidLocal}" useProxy="false" method="POST" resultFormat="text" result="fileSaved(event)" fault="fileError(event)"/>     
	<mx:HTTPService id="filesize_main" url="../fs_main.php{URLvidLocal}" useProxy="false" method="POST" resultFormat="text" result="fileSizeReturn(event)" fault="fileError(event)"/>     
	<mx:HTTPService id="movefile_main" url="../fs_main.php{URLvidLocal}" useProxy="false" method="POST" resultFormat="text" result="filemoved(event)" fault="fileError(event)"/>     
	<mx:HTTPService id="getFileSize" url="../fs_gearsresume.php" useProxy="false" method="POST" resultFormat="text" result="fileSizeReturn(event)"></mx:HTTPService>
	<mx:NumberFormatter id="numberFormatter" precision="2"
						useThousandsSeparator="true" useNegativeSign="true"/> 
	
	<mx:DateFormatter id="df" formatString="{config.datedisplayformat}"/> 
	<mx:DateFormatter id="df_pg" formatString="{config.datedisplayformat}"/>   
	<mx:HBox x="0" y="0" width="100%" height="100%">
		<mx:VBox  paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4" verticalAlign="top" verticalGap="0" height="100%" width="100%">
			<mx:HBox width="100%" height="23">
				<mx:Label text="{lang.To}:" fontWeight="bold" width="130"/>
				<mx:TextInput toolTip="Multiple email address can be entered seperated by comma or semi-colon ( , or ; )" width="100%" valueCommit="{currentFileObj.fileto = FileTo.text;}" id="FileTo" text="{currentFileObj.fileto}" editable="true" change="FlexGlobals.topLevelApplication.correctLinux(event)"/>
			</mx:HBox>
			<mx:HBox width="100%" height="23" verticalAlign="middle">
				<mx:Label text="{lang.From}:" fontWeight="bold" width="130"/>
				<mx:TextInput width="100%" id="FileFrom" valueCommit="{currentFileObj.filefrom = FileFrom.text;}" text="{currentFileObj.filefrom}" borderStyle="none" editable="false" change="FlexGlobals.topLevelApplication.correctLinux(event)"/>
			</mx:HBox> 
			<mx:HBox width="100%" height="23" verticalAlign="middle">
				<mx:Label text="{lang.Subject}: ({lang.Optional})" color="#000000" width="130"/>
				<mx:TextInput width="100%" id="FileSubject" text="{currentFileObj.filesubject}" valueCommit="{currentFileObj.filesubject = FileSubject.text;}" change="FlexGlobals.topLevelApplication.correctLinux(event)"/>
			</mx:HBox>
			<mx:HBox width="100%" height="45">
				<mx:Label text="{lang.Message}: ({lang.Optional})" width="130"/>
				<mx:TextArea width="100%" id="FileMessage" height="45" valueCommit="{currentFileObj.filemessage = FileMessage.text;}" text="{currentFileObj.filemessage}" change="FlexGlobals.topLevelApplication.correctLinux(event)"/>
			</mx:HBox>
			<mx:HBox width="100%" height="27" verticalAlign="middle">
				<mx:Label text="{lang.Expiry_Date}:" width="130" fontWeight="bold"/>
				<mx:DateField valueCommit="{currentFileObj.fileexpirydate = FileExpiryDate.selectedDate;}" id="FileExpiryDate" formatString="{config.datedisplayformat}"/>
				<mx:Spacer width="100%"/>
			</mx:HBox> 
			
			<mx:HBox width="100%" height="47" id="uploadPanel" verticalAlign="middle">
				<mx:VBox width="100%" height="100%" verticalGap="1" verticalAlign="middle">
					<mx:HBox width="100%" height="21">
						<mx:Label text="{lang.File_to_Upload}:" width="130" fontWeight="bold"/>
						<mx:Button label="{lang.Browse}" click="startuploadgears()" id="uploadBtn" height="20"/>
						<mx:Label id="selectedFilename" width="223" text="{currentFileObj.fileoriginalname}"/>
					</mx:HBox>
					<mx:HBox width="100%" height="20">
						<mx:Label text="{lang.Size}:" width="130"/>
						<mx:Label id="selectedFileSize" width="352" text="{currentFileObj.filesize}"/>
					</mx:HBox>
				</mx:VBox>
			</mx:HBox> 
			
			<mx:HBox width="100%" maxHeight="21" visible="{config.AuP}" includeInLayout="{config.AuP}" horizontalGap="8">
				<mx:Spacer width="130"/>
				<mx:CheckBox width="13"  selected="{config.AuP_default}" id="AuPCB"/>
				<mx:TextArea width="333" text="{config.AuP_label}" wordWrap="true" editable="false" height="19" borderStyle="none" fontWeight="bold"/>
			</mx:HBox>
			<mx:HBox width="100%" height="52" id="AuPBox" visible="{config.AuP}" includeInLayout="{config.AuP}">
				<mx:Spacer width="130"/>
				<mx:TextArea width="100%" wordWrap="true" text="{config.AuP_terms}" editable="false" height="100%" fontWeight="normal"/>
			</mx:HBox> 
			<mx:HBox width="100%" height="36" id="uploadMainPanel" verticalAlign="middle" visible="{displayprogressBar}" includeInLayout="{displayprogressBar}">
				<mx:Spacer width="130"/>
				<mx:ProgressBar id="pgBar" mode="manual"  height="30" width="100%" labelPlacement="center" label="Uploading %3%% ({speedString})"/>
				<mx:Label id="speedLabel" width="0"/>
				<mx:Button label="{lang.Cancel}" height="20" click="cancelUpload()" id="cancelBtn"/>
			</mx:HBox>
			<mx:HBox width="100%" height="61" horizontalAlign="right" verticalAlign="middle">
				<mx:Button label="{lang.Send_File}" click="doGearsUpload()" id="btUpload" enabled="true" height="56" width="148"/>
			</mx:HBox>
			
		</mx:VBox>
		<mx:VBox width="250" height="100%">
			<mx:HBox width="100%" height="30" verticalAlign="middle">
				<mx:Image source="@Embed(source='/assets/num_1.png')"/>
				<mx:Label text="{lang.Enter_delivery_email_address}"/>
			</mx:HBox>
			<mx:HBox width="100%" height="30" verticalAlign="middle">
				<mx:Image source="@Embed(source='/assets/num_2.png')"/>
				<mx:Label text="{lang.Set_expiry_date}"/>
			</mx:HBox>
			<mx:HBox width="100%" height="30" verticalAlign="middle">
				<mx:Image source="@Embed(source='/assets/num_3.png')"/>
				<mx:Label text="{lang.Browse_for_a_file}"/>
			</mx:HBox>
			<mx:HBox width="100%" height="30" verticalAlign="middle">
				<mx:Image source="@Embed(source='/assets/num_4.png')"/>
				<mx:Label text="{lang.Click_on_Send}"/>
			</mx:HBox>
			
			<mx:TextArea  width="234" height="201" id="tempText" borderStyle="none" editable="false"/>
		</mx:VBox>
	</mx:HBox>
	
</mx:Panel>
